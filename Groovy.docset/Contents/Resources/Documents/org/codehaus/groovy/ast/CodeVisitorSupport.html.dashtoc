{"entries":[{"name":"Constructors","isHeader":true},{"name":"CodeVisitorSupport()","path":"CodeVisitorSupport()","entryType":"Constructor"},{"name":"Methods","isHeader":true},{"name":"visitArgumentlistExpression(ArgumentListExpression)","path":"visitArgumentlistExpression(org.codehaus.groovy.ast.expr.ArgumentListExpression)","entryType":"Method"},{"name":"visitArrayExpression(ArrayExpression)","path":"visitArrayExpression(org.codehaus.groovy.ast.expr.ArrayExpression)","entryType":"Method"},{"name":"visitAssertStatement(AssertStatement)","path":"visitAssertStatement(org.codehaus.groovy.ast.stmt.AssertStatement)","entryType":"Method"},{"name":"visitAttributeExpression(AttributeExpression)","path":"visitAttributeExpression(org.codehaus.groovy.ast.expr.AttributeExpression)","entryType":"Method"},{"name":"visitBinaryExpression(BinaryExpression)","path":"visitBinaryExpression(org.codehaus.groovy.ast.expr.BinaryExpression)","entryType":"Method"},{"name":"visitBitwiseNegationExpression(BitwiseNegationExpression)","path":"visitBitwiseNegationExpression(org.codehaus.groovy.ast.expr.BitwiseNegationExpression)","entryType":"Method"},{"name":"visitBlockStatement(BlockStatement)","path":"visitBlockStatement(org.codehaus.groovy.ast.stmt.BlockStatement)","entryType":"Method"},{"name":"visitBooleanExpression(BooleanExpression)","path":"visitBooleanExpression(org.codehaus.groovy.ast.expr.BooleanExpression)","entryType":"Method"},{"name":"visitBreakStatement(BreakStatement)","path":"visitBreakStatement(org.codehaus.groovy.ast.stmt.BreakStatement)","entryType":"Method"},{"name":"visitBytecodeExpression(BytecodeExpression)","path":"visitBytecodeExpression(org.codehaus.groovy.classgen.BytecodeExpression)","entryType":"Method"},{"name":"visitCaseStatement(CaseStatement)","path":"visitCaseStatement(org.codehaus.groovy.ast.stmt.CaseStatement)","entryType":"Method"},{"name":"visitCastExpression(CastExpression)","path":"visitCastExpression(org.codehaus.groovy.ast.expr.CastExpression)","entryType":"Method"},{"name":"visitCatchStatement(CatchStatement)","path":"visitCatchStatement(org.codehaus.groovy.ast.stmt.CatchStatement)","entryType":"Method"},{"name":"visitClassExpression(ClassExpression)","path":"visitClassExpression(org.codehaus.groovy.ast.expr.ClassExpression)","entryType":"Method"},{"name":"visitClosureExpression(ClosureExpression)","path":"visitClosureExpression(org.codehaus.groovy.ast.expr.ClosureExpression)","entryType":"Method"},{"name":"visitClosureListExpression(ClosureListExpression)","path":"visitClosureListExpression(org.codehaus.groovy.ast.expr.ClosureListExpression)","entryType":"Method"},{"name":"visitConstantExpression(ConstantExpression)","path":"visitConstantExpression(org.codehaus.groovy.ast.expr.ConstantExpression)","entryType":"Method"},{"name":"visitConstructorCallExpression(ConstructorCallExpression)","path":"visitConstructorCallExpression(org.codehaus.groovy.ast.expr.ConstructorCallExpression)","entryType":"Method"},{"name":"visitContinueStatement(ContinueStatement)","path":"visitContinueStatement(org.codehaus.groovy.ast.stmt.ContinueStatement)","entryType":"Method"},{"name":"visitDeclarationExpression(DeclarationExpression)","path":"visitDeclarationExpression(org.codehaus.groovy.ast.expr.DeclarationExpression)","entryType":"Method"},{"name":"visitDoWhileLoop(DoWhileStatement)","path":"visitDoWhileLoop(org.codehaus.groovy.ast.stmt.DoWhileStatement)","entryType":"Method"},{"name":"visitEmptyStatement(EmptyStatement)","path":"visitEmptyStatement(org.codehaus.groovy.ast.stmt.EmptyStatement)","entryType":"Method"},{"name":"visitExpressionStatement(ExpressionStatement)","path":"visitExpressionStatement(org.codehaus.groovy.ast.stmt.ExpressionStatement)","entryType":"Method"},{"name":"visitFieldExpression(FieldExpression)","path":"visitFieldExpression(org.codehaus.groovy.ast.expr.FieldExpression)","entryType":"Method"},{"name":"visitForLoop(ForStatement)","path":"visitForLoop(org.codehaus.groovy.ast.stmt.ForStatement)","entryType":"Method"},{"name":"visitGStringExpression(GStringExpression)","path":"visitGStringExpression(org.codehaus.groovy.ast.expr.GStringExpression)","entryType":"Method"},{"name":"visitIfElse(IfStatement)","path":"visitIfElse(org.codehaus.groovy.ast.stmt.IfStatement)","entryType":"Method"},{"name":"visitListExpression(ListExpression)","path":"visitListExpression(org.codehaus.groovy.ast.expr.ListExpression)","entryType":"Method"},{"name":"visitListOfExpressions(List)","path":"visitListOfExpressions(java.util.List)","entryType":"Method"},{"name":"visitMapEntryExpression(MapEntryExpression)","path":"visitMapEntryExpression(org.codehaus.groovy.ast.expr.MapEntryExpression)","entryType":"Method"},{"name":"visitMapExpression(MapExpression)","path":"visitMapExpression(org.codehaus.groovy.ast.expr.MapExpression)","entryType":"Method"},{"name":"visitMethodCallExpression(MethodCallExpression)","path":"visitMethodCallExpression(org.codehaus.groovy.ast.expr.MethodCallExpression)","entryType":"Method"},{"name":"visitMethodPointerExpression(MethodPointerExpression)","path":"visitMethodPointerExpression(org.codehaus.groovy.ast.expr.MethodPointerExpression)","entryType":"Method"},{"name":"visitNotExpression(NotExpression)","path":"visitNotExpression(org.codehaus.groovy.ast.expr.NotExpression)","entryType":"Method"},{"name":"visitPostfixExpression(PostfixExpression)","path":"visitPostfixExpression(org.codehaus.groovy.ast.expr.PostfixExpression)","entryType":"Method"},{"name":"visitPrefixExpression(PrefixExpression)","path":"visitPrefixExpression(org.codehaus.groovy.ast.expr.PrefixExpression)","entryType":"Method"},{"name":"visitPropertyExpression(PropertyExpression)","path":"visitPropertyExpression(org.codehaus.groovy.ast.expr.PropertyExpression)","entryType":"Method"},{"name":"visitRangeExpression(RangeExpression)","path":"visitRangeExpression(org.codehaus.groovy.ast.expr.RangeExpression)","entryType":"Method"},{"name":"visitReturnStatement(ReturnStatement)","path":"visitReturnStatement(org.codehaus.groovy.ast.stmt.ReturnStatement)","entryType":"Method"},{"name":"visitShortTernaryExpression(ElvisOperatorExpression)","path":"visitShortTernaryExpression(org.codehaus.groovy.ast.expr.ElvisOperatorExpression)","entryType":"Method"},{"name":"visitSpreadExpression(SpreadExpression)","path":"visitSpreadExpression(org.codehaus.groovy.ast.expr.SpreadExpression)","entryType":"Method"},{"name":"visitSpreadMapExpression(SpreadMapExpression)","path":"visitSpreadMapExpression(org.codehaus.groovy.ast.expr.SpreadMapExpression)","entryType":"Method"},{"name":"visitStaticMethodCallExpression(StaticMethodCallExpression)","path":"visitStaticMethodCallExpression(org.codehaus.groovy.ast.expr.StaticMethodCallExpression)","entryType":"Method"},{"name":"visitSwitch(SwitchStatement)","path":"visitSwitch(org.codehaus.groovy.ast.stmt.SwitchStatement)","entryType":"Method"},{"name":"visitSynchronizedStatement(SynchronizedStatement)","path":"visitSynchronizedStatement(org.codehaus.groovy.ast.stmt.SynchronizedStatement)","entryType":"Method"},{"name":"visitTernaryExpression(TernaryExpression)","path":"visitTernaryExpression(org.codehaus.groovy.ast.expr.TernaryExpression)","entryType":"Method"},{"name":"visitThrowStatement(ThrowStatement)","path":"visitThrowStatement(org.codehaus.groovy.ast.stmt.ThrowStatement)","entryType":"Method"},{"name":"visitTryCatchFinally(TryCatchStatement)","path":"visitTryCatchFinally(org.codehaus.groovy.ast.stmt.TryCatchStatement)","entryType":"Method"},{"name":"visitTupleExpression(TupleExpression)","path":"visitTupleExpression(org.codehaus.groovy.ast.expr.TupleExpression)","entryType":"Method"},{"name":"visitUnaryMinusExpression(UnaryMinusExpression)","path":"visitUnaryMinusExpression(org.codehaus.groovy.ast.expr.UnaryMinusExpression)","entryType":"Method"},{"name":"visitUnaryPlusExpression(UnaryPlusExpression)","path":"visitUnaryPlusExpression(org.codehaus.groovy.ast.expr.UnaryPlusExpression)","entryType":"Method"},{"name":"visitVariableExpression(VariableExpression)","path":"visitVariableExpression(org.codehaus.groovy.ast.expr.VariableExpression)","entryType":"Method"},{"name":"visitWhileLoop(WhileStatement)","path":"visitWhileLoop(org.codehaus.groovy.ast.stmt.WhileStatement)","entryType":"Method"}]}