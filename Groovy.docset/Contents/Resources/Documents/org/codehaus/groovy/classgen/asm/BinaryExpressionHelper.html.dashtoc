{"entries":[{"name":"Constructors","isHeader":true},{"name":"BinaryExpressionHelper(WriterController)","path":"BinaryExpressionHelper(org.codehaus.groovy.classgen.asm.WriterController)","entryType":"Constructor"},{"name":"Methods","isHeader":true},{"name":"assignToArray(Expression, Expression, Expression, Expression)","path":"assignToArray(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"eval(BinaryExpression)","path":"eval(org.codehaus.groovy.ast.expr.BinaryExpression)","entryType":"Method"},{"name":"evaluateArrayAssignmentWithOperator(String, BinaryExpression, BinaryExpression)","path":"evaluateArrayAssignmentWithOperator(java.lang.String,%20org.codehaus.groovy.ast.expr.BinaryExpression,%20org.codehaus.groovy.ast.expr.BinaryExpression)","entryType":"Method"},{"name":"evaluateBinaryExpression(String, BinaryExpression)","path":"evaluateBinaryExpression(java.lang.String,%20org.codehaus.groovy.ast.expr.BinaryExpression)","entryType":"Method"},{"name":"evaluateBinaryExpressionWithAssignment(String, BinaryExpression)","path":"evaluateBinaryExpressionWithAssignment(java.lang.String,%20org.codehaus.groovy.ast.expr.BinaryExpression)","entryType":"Method"},{"name":"evaluateCompareExpression(MethodCaller, BinaryExpression)","path":"evaluateCompareExpression(org.codehaus.groovy.classgen.asm.MethodCaller,%20org.codehaus.groovy.ast.expr.BinaryExpression)","entryType":"Method"},{"name":"evaluateEqual(BinaryExpression, boolean)","path":"evaluateEqual(org.codehaus.groovy.ast.expr.BinaryExpression,%20boolean)","entryType":"Method"},{"name":"evaluatePostfixMethod(PostfixExpression)","path":"evaluatePostfixMethod(org.codehaus.groovy.ast.expr.PostfixExpression)","entryType":"Method"},{"name":"evaluatePrefixMethod(PrefixExpression)","path":"evaluatePrefixMethod(org.codehaus.groovy.ast.expr.PrefixExpression)","entryType":"Method"},{"name":"evaluateTernary(TernaryExpression)","path":"evaluateTernary(org.codehaus.groovy.ast.expr.TernaryExpression)","entryType":"Method"},{"name":"getController()","path":"getController()","entryType":"Method"},{"name":"getIsCaseMethod()","path":"getIsCaseMethod()","entryType":"Method"},{"name":"writePostOrPrefixMethod(int, String, Expression, Expression)","path":"writePostOrPrefixMethod(int,%20java.lang.String,%20org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"}]}