{"entries":[{"name":"Constructors","isHeader":true},{"name":"GeneralUtils()","path":"GeneralUtils()","entryType":"Constructor"},{"name":"Methods","isHeader":true},{"name":"andX(Expression, Expression)","path":"andX(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"args(Expression...)","path":"args(org.codehaus.groovy.ast.expr.Expression...)","entryType":"Method"},{"name":"args(List)","path":"args(java.util.List)","entryType":"Method"},{"name":"args(Parameter[])","path":"args(org.codehaus.groovy.ast.Parameter%5B%5D)","entryType":"Method"},{"name":"args(String...)","path":"args(java.lang.String...)","entryType":"Method"},{"name":"assignS(Expression, Expression)","path":"assignS(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"assignX(Expression, Expression)","path":"assignX(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"attrX(Expression, Expression)","path":"attrX(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"block(Statement...)","path":"block(org.codehaus.groovy.ast.stmt.Statement...)","entryType":"Method"},{"name":"block(VariableScope, Statement...)","path":"block(org.codehaus.groovy.ast.VariableScope,%20org.codehaus.groovy.ast.stmt.Statement...)","entryType":"Method"},{"name":"callSuperX(String)","path":"callSuperX(java.lang.String)","entryType":"Method"},{"name":"callSuperX(String, Expression)","path":"callSuperX(java.lang.String,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"callThisX(String)","path":"callThisX(java.lang.String)","entryType":"Method"},{"name":"callThisX(String, Expression)","path":"callThisX(java.lang.String,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"callX(ClassNode, String)","path":"callX(org.codehaus.groovy.ast.ClassNode,%20java.lang.String)","entryType":"Method"},{"name":"callX(ClassNode, String, Expression)","path":"callX(org.codehaus.groovy.ast.ClassNode,%20java.lang.String,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"callX(Expression, Expression, Expression)","path":"callX(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"callX(Expression, String)","path":"callX(org.codehaus.groovy.ast.expr.Expression,%20java.lang.String)","entryType":"Method"},{"name":"callX(Expression, String, Expression)","path":"callX(org.codehaus.groovy.ast.expr.Expression,%20java.lang.String,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"castX(ClassNode, Expression)","path":"castX(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"castX(ClassNode, Expression, boolean)","path":"castX(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.expr.Expression,%20boolean)","entryType":"Method"},{"name":"classX(Class)","path":"classX(java.lang.Class)","entryType":"Method"},{"name":"classX(ClassNode)","path":"classX(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"cloneParams(Parameter[])","path":"cloneParams(org.codehaus.groovy.ast.Parameter%5B%5D)","entryType":"Method"},{"name":"closureX(Parameter[], Statement)","path":"closureX(org.codehaus.groovy.ast.Parameter%5B%5D,%20org.codehaus.groovy.ast.stmt.Statement)","entryType":"Method"},{"name":"closureX(Statement)","path":"closureX(org.codehaus.groovy.ast.stmt.Statement)","entryType":"Method"},{"name":"cmpX(Expression, Expression)","path":"cmpX(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"constX(Object)","path":"constX(java.lang.Object)","entryType":"Method"},{"name":"constX(Object, boolean)","path":"constX(java.lang.Object,%20boolean)","entryType":"Method"},{"name":"copyAnnotatedNodeAnnotations(AnnotatedNode, List, List)","path":"copyAnnotatedNodeAnnotations(org.codehaus.groovy.ast.AnnotatedNode,%20java.util.List,%20java.util.List)","entryType":"Method"},{"name":"createConstructorStatementDefault(FieldNode)","path":"createConstructorStatementDefault(org.codehaus.groovy.ast.FieldNode)","entryType":"Method"},{"name":"ctorSuperS()","path":"ctorSuperS()","entryType":"Method"},{"name":"ctorSuperS(Expression)","path":"ctorSuperS(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"ctorThisS()","path":"ctorThisS()","entryType":"Method"},{"name":"ctorThisS(Expression)","path":"ctorThisS(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"ctorX(ClassNode)","path":"ctorX(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"ctorX(ClassNode, Expression)","path":"ctorX(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"declS(Expression, Expression)","path":"declS(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"equalsNullX(Expression)","path":"equalsNullX(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"eqX(Expression, Expression)","path":"eqX(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"fieldX(ClassNode, String)","path":"fieldX(org.codehaus.groovy.ast.ClassNode,%20java.lang.String)","entryType":"Method"},{"name":"fieldX(FieldNode)","path":"fieldX(org.codehaus.groovy.ast.FieldNode)","entryType":"Method"},{"name":"findArg(String)","path":"findArg(java.lang.String)","entryType":"Method"},{"name":"getAllMethods(ClassNode)","path":"getAllMethods(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"getAllProperties(ClassNode)","path":"getAllProperties(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"getGetterName(PropertyNode)","path":"getGetterName(org.codehaus.groovy.ast.PropertyNode)","entryType":"Method"},{"name":"getInstanceNonPropertyFields(ClassNode)","path":"getInstanceNonPropertyFields(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"getInstanceProperties(ClassNode)","path":"getInstanceProperties(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"getInstancePropertyFields(ClassNode)","path":"getInstancePropertyFields(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"getInterfacesAndSuperInterfaces(ClassNode)","path":"getInterfacesAndSuperInterfaces(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"getSuperNonPropertyFields(ClassNode)","path":"getSuperNonPropertyFields(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"getSuperPropertyFields(ClassNode)","path":"getSuperPropertyFields(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"hasClassX(Expression, ClassNode)","path":"hasClassX(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"hasDeclaredMethod(ClassNode, String, int)","path":"hasDeclaredMethod(org.codehaus.groovy.ast.ClassNode,%20java.lang.String,%20int)","entryType":"Method"},{"name":"hasEqualFieldX(FieldNode, Expression)","path":"hasEqualFieldX(org.codehaus.groovy.ast.FieldNode,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"hasEqualPropertyX(PropertyNode, Expression)","path":"hasEqualPropertyX(org.codehaus.groovy.ast.PropertyNode,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"hasSameFieldX(FieldNode, Expression)","path":"hasSameFieldX(org.codehaus.groovy.ast.FieldNode,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"hasSamePropertyX(PropertyNode, Expression)","path":"hasSamePropertyX(org.codehaus.groovy.ast.PropertyNode,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"ifElseS(Expression, Statement, Statement)","path":"ifElseS(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.stmt.Statement,%20org.codehaus.groovy.ast.stmt.Statement)","entryType":"Method"},{"name":"ifS(Expression, Expression)","path":"ifS(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"ifS(Expression, Statement)","path":"ifS(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.stmt.Statement)","entryType":"Method"},{"name":"indexX(Expression, Expression)","path":"indexX(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"isInstanceOfX(Expression, ClassNode)","path":"isInstanceOfX(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"isOneX(Expression)","path":"isOneX(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"isOrImplements(ClassNode, ClassNode)","path":"isOrImplements(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"isTrueX(Expression)","path":"isTrueX(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"isZeroX(Expression)","path":"isZeroX(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"ltX(Expression, Expression)","path":"ltX(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"makeDescriptorWithoutReturnType(MethodNode)","path":"makeDescriptorWithoutReturnType(org.codehaus.groovy.ast.MethodNode)","entryType":"Method"},{"name":"neX(Expression, Expression)","path":"neX(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"notNullX(Expression)","path":"notNullX(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"notX(Expression)","path":"notX(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"orX(Expression, Expression)","path":"orX(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"param(ClassNode, String)","path":"param(org.codehaus.groovy.ast.ClassNode,%20java.lang.String)","entryType":"Method"},{"name":"param(ClassNode, String, Expression)","path":"param(org.codehaus.groovy.ast.ClassNode,%20java.lang.String,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"params(Parameter...)","path":"params(org.codehaus.groovy.ast.Parameter...)","entryType":"Method"},{"name":"plusX(Expression, Expression)","path":"plusX(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"propX(Expression, Expression)","path":"propX(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"propX(Expression, String)","path":"propX(org.codehaus.groovy.ast.expr.Expression,%20java.lang.String)","entryType":"Method"},{"name":"returnS(Expression)","path":"returnS(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"safeExpression(Expression, Expression)","path":"safeExpression(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"sameX(Expression, Expression)","path":"sameX(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"stmt(Expression)","path":"stmt(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"ternaryX(Expression, Expression, Expression)","path":"ternaryX(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"varX(String)","path":"varX(java.lang.String)","entryType":"Method"},{"name":"varX(String, ClassNode)","path":"varX(java.lang.String,%20org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"varX(Variable)","path":"varX(org.codehaus.groovy.ast.Variable)","entryType":"Method"},{"name":"Fields","isHeader":true},{"name":"AND","path":"AND","entryType":"Field"},{"name":"ASSIGN","path":"ASSIGN","entryType":"Field"},{"name":"CMP","path":"CMP","entryType":"Field"},{"name":"EQ","path":"EQ","entryType":"Field"},{"name":"LT","path":"LT","entryType":"Field"},{"name":"NE","path":"NE","entryType":"Field"},{"name":"OR","path":"OR","entryType":"Field"}]}