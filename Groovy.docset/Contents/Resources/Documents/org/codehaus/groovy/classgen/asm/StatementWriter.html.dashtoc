{"entries":[{"name":"Constructors","isHeader":true},{"name":"StatementWriter(WriterController)","path":"StatementWriter(org.codehaus.groovy.classgen.asm.WriterController)","entryType":"Constructor"},{"name":"Methods","isHeader":true},{"name":"writeAssert(AssertStatement)","path":"writeAssert(org.codehaus.groovy.ast.stmt.AssertStatement)","entryType":"Method"},{"name":"writeBlockStatement(BlockStatement)","path":"writeBlockStatement(org.codehaus.groovy.ast.stmt.BlockStatement)","entryType":"Method"},{"name":"writeBreak(BreakStatement)","path":"writeBreak(org.codehaus.groovy.ast.stmt.BreakStatement)","entryType":"Method"},{"name":"writeCaseStatement(CaseStatement, int, Label, Label)","path":"writeCaseStatement(org.codehaus.groovy.ast.stmt.CaseStatement,%20int,%20org.objectweb.asm.Label,%20org.objectweb.asm.Label)","entryType":"Method"},{"name":"writeContinue(ContinueStatement)","path":"writeContinue(org.codehaus.groovy.ast.stmt.ContinueStatement)","entryType":"Method"},{"name":"writeDoWhileLoop(DoWhileStatement)","path":"writeDoWhileLoop(org.codehaus.groovy.ast.stmt.DoWhileStatement)","entryType":"Method"},{"name":"writeExpressionStatement(ExpressionStatement)","path":"writeExpressionStatement(org.codehaus.groovy.ast.stmt.ExpressionStatement)","entryType":"Method"},{"name":"writeForInLoop(ForStatement)","path":"writeForInLoop(org.codehaus.groovy.ast.stmt.ForStatement)","entryType":"Method"},{"name":"writeForLoopWithClosureList(ForStatement)","path":"writeForLoopWithClosureList(org.codehaus.groovy.ast.stmt.ForStatement)","entryType":"Method"},{"name":"writeForStatement(ForStatement)","path":"writeForStatement(org.codehaus.groovy.ast.stmt.ForStatement)","entryType":"Method"},{"name":"writeIfElse(IfStatement)","path":"writeIfElse(org.codehaus.groovy.ast.stmt.IfStatement)","entryType":"Method"},{"name":"writeIteratorHasNext(MethodVisitor)","path":"writeIteratorHasNext(org.objectweb.asm.MethodVisitor)","entryType":"Method"},{"name":"writeIteratorNext(MethodVisitor)","path":"writeIteratorNext(org.objectweb.asm.MethodVisitor)","entryType":"Method"},{"name":"writeReturn(ReturnStatement)","path":"writeReturn(org.codehaus.groovy.ast.stmt.ReturnStatement)","entryType":"Method"},{"name":"writeStatementLabel(Statement)","path":"writeStatementLabel(org.codehaus.groovy.ast.stmt.Statement)","entryType":"Method"},{"name":"writeSwitch(SwitchStatement)","path":"writeSwitch(org.codehaus.groovy.ast.stmt.SwitchStatement)","entryType":"Method"},{"name":"writeSynchronized(SynchronizedStatement)","path":"writeSynchronized(org.codehaus.groovy.ast.stmt.SynchronizedStatement)","entryType":"Method"},{"name":"writeThrow(ThrowStatement)","path":"writeThrow(org.codehaus.groovy.ast.stmt.ThrowStatement)","entryType":"Method"},{"name":"writeTryCatchFinally(TryCatchStatement)","path":"writeTryCatchFinally(org.codehaus.groovy.ast.stmt.TryCatchStatement)","entryType":"Method"},{"name":"writeWhileLoop(WhileStatement)","path":"writeWhileLoop(org.codehaus.groovy.ast.stmt.WhileStatement)","entryType":"Method"}]}