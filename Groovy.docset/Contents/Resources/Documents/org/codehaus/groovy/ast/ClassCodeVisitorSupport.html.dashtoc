{"entries":[{"name":"Constructors","isHeader":true},{"name":"ClassCodeVisitorSupport()","path":"ClassCodeVisitorSupport()","entryType":"Constructor"},{"name":"Methods","isHeader":true},{"name":"addError(String, ASTNode)","path":"addError(java.lang.String,%20org.codehaus.groovy.ast.ASTNode)","entryType":"Method"},{"name":"getSourceUnit()","path":"getSourceUnit()","entryType":"Method"},{"name":"visitAnnotations(AnnotatedNode)","path":"visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode)","entryType":"Method"},{"name":"visitAssertStatement(AssertStatement)","path":"visitAssertStatement(org.codehaus.groovy.ast.stmt.AssertStatement)","entryType":"Method"},{"name":"visitBlockStatement(BlockStatement)","path":"visitBlockStatement(org.codehaus.groovy.ast.stmt.BlockStatement)","entryType":"Method"},{"name":"visitBreakStatement(BreakStatement)","path":"visitBreakStatement(org.codehaus.groovy.ast.stmt.BreakStatement)","entryType":"Method"},{"name":"visitCaseStatement(CaseStatement)","path":"visitCaseStatement(org.codehaus.groovy.ast.stmt.CaseStatement)","entryType":"Method"},{"name":"visitCatchStatement(CatchStatement)","path":"visitCatchStatement(org.codehaus.groovy.ast.stmt.CatchStatement)","entryType":"Method"},{"name":"visitClass(ClassNode)","path":"visitClass(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"visitClassCodeContainer(Statement)","path":"visitClassCodeContainer(org.codehaus.groovy.ast.stmt.Statement)","entryType":"Method"},{"name":"visitConstructor(ConstructorNode)","path":"visitConstructor(org.codehaus.groovy.ast.ConstructorNode)","entryType":"Method"},{"name":"visitConstructorOrMethod(MethodNode, boolean)","path":"visitConstructorOrMethod(org.codehaus.groovy.ast.MethodNode,%20boolean)","entryType":"Method"},{"name":"visitContinueStatement(ContinueStatement)","path":"visitContinueStatement(org.codehaus.groovy.ast.stmt.ContinueStatement)","entryType":"Method"},{"name":"visitDeclarationExpression(DeclarationExpression)","path":"visitDeclarationExpression(org.codehaus.groovy.ast.expr.DeclarationExpression)","entryType":"Method"},{"name":"visitDoWhileLoop(DoWhileStatement)","path":"visitDoWhileLoop(org.codehaus.groovy.ast.stmt.DoWhileStatement)","entryType":"Method"},{"name":"visitExpressionStatement(ExpressionStatement)","path":"visitExpressionStatement(org.codehaus.groovy.ast.stmt.ExpressionStatement)","entryType":"Method"},{"name":"visitField(FieldNode)","path":"visitField(org.codehaus.groovy.ast.FieldNode)","entryType":"Method"},{"name":"visitForLoop(ForStatement)","path":"visitForLoop(org.codehaus.groovy.ast.stmt.ForStatement)","entryType":"Method"},{"name":"visitIfElse(IfStatement)","path":"visitIfElse(org.codehaus.groovy.ast.stmt.IfStatement)","entryType":"Method"},{"name":"visitImports(ModuleNode)","path":"visitImports(org.codehaus.groovy.ast.ModuleNode)","entryType":"Method"},{"name":"visitMethod(MethodNode)","path":"visitMethod(org.codehaus.groovy.ast.MethodNode)","entryType":"Method"},{"name":"visitObjectInitializerStatements(ClassNode)","path":"visitObjectInitializerStatements(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"visitPackage(PackageNode)","path":"visitPackage(org.codehaus.groovy.ast.PackageNode)","entryType":"Method"},{"name":"visitProperty(PropertyNode)","path":"visitProperty(org.codehaus.groovy.ast.PropertyNode)","entryType":"Method"},{"name":"visitReturnStatement(ReturnStatement)","path":"visitReturnStatement(org.codehaus.groovy.ast.stmt.ReturnStatement)","entryType":"Method"},{"name":"visitStatement(Statement)","path":"visitStatement(org.codehaus.groovy.ast.stmt.Statement)","entryType":"Method"},{"name":"visitSwitch(SwitchStatement)","path":"visitSwitch(org.codehaus.groovy.ast.stmt.SwitchStatement)","entryType":"Method"},{"name":"visitSynchronizedStatement(SynchronizedStatement)","path":"visitSynchronizedStatement(org.codehaus.groovy.ast.stmt.SynchronizedStatement)","entryType":"Method"},{"name":"visitThrowStatement(ThrowStatement)","path":"visitThrowStatement(org.codehaus.groovy.ast.stmt.ThrowStatement)","entryType":"Method"},{"name":"visitTryCatchFinally(TryCatchStatement)","path":"visitTryCatchFinally(org.codehaus.groovy.ast.stmt.TryCatchStatement)","entryType":"Method"},{"name":"visitWhileLoop(WhileStatement)","path":"visitWhileLoop(org.codehaus.groovy.ast.stmt.WhileStatement)","entryType":"Method"}]}