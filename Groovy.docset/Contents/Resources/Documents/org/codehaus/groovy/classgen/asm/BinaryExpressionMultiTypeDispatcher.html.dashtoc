{"entries":[{"name":"Constructors","isHeader":true},{"name":"BinaryExpressionMultiTypeDispatcher(WriterController)","path":"BinaryExpressionMultiTypeDispatcher(org.codehaus.groovy.classgen.asm.WriterController)","entryType":"Constructor"},{"name":"Methods","isHeader":true},{"name":"assignToArray(Expression, Expression, Expression, Expression)","path":"assignToArray(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"doPrimitiveCompare(ClassNode, ClassNode, BinaryExpression)","path":"doPrimitiveCompare(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.expr.BinaryExpression)","entryType":"Method"},{"name":"doPrimtiveCompare(ClassNode, ClassNode, BinaryExpression)","path":"doPrimtiveCompare(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.expr.BinaryExpression)","entryType":"Method"},{"name":"evaluateBinaryExpression(String, BinaryExpression)","path":"evaluateBinaryExpression(java.lang.String,%20org.codehaus.groovy.ast.expr.BinaryExpression)","entryType":"Method"},{"name":"evaluateBinaryExpressionWithAssignment(String, BinaryExpression)","path":"evaluateBinaryExpressionWithAssignment(java.lang.String,%20org.codehaus.groovy.ast.expr.BinaryExpression)","entryType":"Method"},{"name":"evaluateCompareExpression(MethodCaller, BinaryExpression)","path":"evaluateCompareExpression(org.codehaus.groovy.classgen.asm.MethodCaller,%20org.codehaus.groovy.ast.expr.BinaryExpression)","entryType":"Method"},{"name":"getOperandType(ClassNode)","path":"getOperandType(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"initializeDelegateHelpers()","path":"initializeDelegateHelpers()","entryType":"Method"},{"name":"writePostOrPrefixMethod(int, String, Expression, Expression)","path":"writePostOrPrefixMethod(int,%20java.lang.String,%20org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"Fields","isHeader":true},{"name":"binExpWriter","path":"binExpWriter","entryType":"Field"},{"name":"typeMap","path":"typeMap","entryType":"Field"},{"name":"typeMapKeyNames","path":"typeMapKeyNames","entryType":"Field"}]}