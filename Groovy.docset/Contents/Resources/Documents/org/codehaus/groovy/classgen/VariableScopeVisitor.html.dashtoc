{"entries":[{"name":"Constructors","isHeader":true},{"name":"VariableScopeVisitor(SourceUnit)","path":"VariableScopeVisitor(org.codehaus.groovy.control.SourceUnit)","entryType":"Constructor"},{"name":"VariableScopeVisitor(SourceUnit, boolean)","path":"VariableScopeVisitor(org.codehaus.groovy.control.SourceUnit,%20boolean)","entryType":"Constructor"},{"name":"Methods","isHeader":true},{"name":"getSourceUnit()","path":"getSourceUnit()","entryType":"Method"},{"name":"prepareVisit(ClassNode)","path":"prepareVisit(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"visitAnnotations(AnnotatedNode)","path":"visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode)","entryType":"Method"},{"name":"visitBinaryExpression(BinaryExpression)","path":"visitBinaryExpression(org.codehaus.groovy.ast.expr.BinaryExpression)","entryType":"Method"},{"name":"visitBlockStatement(BlockStatement)","path":"visitBlockStatement(org.codehaus.groovy.ast.stmt.BlockStatement)","entryType":"Method"},{"name":"visitCatchStatement(CatchStatement)","path":"visitCatchStatement(org.codehaus.groovy.ast.stmt.CatchStatement)","entryType":"Method"},{"name":"visitClass(ClassNode)","path":"visitClass(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"visitClosureExpression(ClosureExpression)","path":"visitClosureExpression(org.codehaus.groovy.ast.expr.ClosureExpression)","entryType":"Method"},{"name":"visitConstructorCallExpression(ConstructorCallExpression)","path":"visitConstructorCallExpression(org.codehaus.groovy.ast.expr.ConstructorCallExpression)","entryType":"Method"},{"name":"visitConstructorOrMethod(MethodNode, boolean)","path":"visitConstructorOrMethod(org.codehaus.groovy.ast.MethodNode,%20boolean)","entryType":"Method"},{"name":"visitDeclarationExpression(DeclarationExpression)","path":"visitDeclarationExpression(org.codehaus.groovy.ast.expr.DeclarationExpression)","entryType":"Method"},{"name":"visitField(FieldNode)","path":"visitField(org.codehaus.groovy.ast.FieldNode)","entryType":"Method"},{"name":"visitFieldExpression(FieldExpression)","path":"visitFieldExpression(org.codehaus.groovy.ast.expr.FieldExpression)","entryType":"Method"},{"name":"visitForLoop(ForStatement)","path":"visitForLoop(org.codehaus.groovy.ast.stmt.ForStatement)","entryType":"Method"},{"name":"visitIfElse(IfStatement)","path":"visitIfElse(org.codehaus.groovy.ast.stmt.IfStatement)","entryType":"Method"},{"name":"visitMethodCallExpression(MethodCallExpression)","path":"visitMethodCallExpression(org.codehaus.groovy.ast.expr.MethodCallExpression)","entryType":"Method"},{"name":"visitProperty(PropertyNode)","path":"visitProperty(org.codehaus.groovy.ast.PropertyNode)","entryType":"Method"},{"name":"visitPropertyExpression(PropertyExpression)","path":"visitPropertyExpression(org.codehaus.groovy.ast.expr.PropertyExpression)","entryType":"Method"},{"name":"visitVariableExpression(VariableExpression)","path":"visitVariableExpression(org.codehaus.groovy.ast.expr.VariableExpression)","entryType":"Method"}]}