{"entries":[{"name":"Constructors","isHeader":true},{"name":"StaticTypeCheckingVisitor(SourceUnit, ClassNode)","path":"StaticTypeCheckingVisitor(org.codehaus.groovy.control.SourceUnit,%20org.codehaus.groovy.ast.ClassNode)","entryType":"Constructor"},{"name":"Methods","isHeader":true},{"name":"addAmbiguousErrorMessage(List, String, ClassNode[], Expression)","path":"addAmbiguousErrorMessage(java.util.List,%20java.lang.String,%20org.codehaus.groovy.ast.ClassNode%5B%5D,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"addAssignmentError(ClassNode, ClassNode, Expression)","path":"addAssignmentError(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"addCategoryMethodCallError(Expression)","path":"addCategoryMethodCallError(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"addClosureReturnType(ClassNode)","path":"addClosureReturnType(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"addError(String, ASTNode)","path":"addError(java.lang.String,%20org.codehaus.groovy.ast.ASTNode)","entryType":"Method"},{"name":"addNoMatchingMethodError(ClassNode, String, ClassNode[], Expression)","path":"addNoMatchingMethodError(org.codehaus.groovy.ast.ClassNode,%20java.lang.String,%20org.codehaus.groovy.ast.ClassNode%5B%5D,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"addReceivers(List, Collection, boolean)","path":"addReceivers(java.util.List,%20java.util.Collection,%20boolean)","entryType":"Method"},{"name":"addStaticTypeError(String, ASTNode)","path":"addStaticTypeError(java.lang.String,%20org.codehaus.groovy.ast.ASTNode)","entryType":"Method"},{"name":"addTypeCheckingExtension(TypeCheckingExtension)","path":"addTypeCheckingExtension(org.codehaus.groovy.transform.stc.TypeCheckingExtension)","entryType":"Method"},{"name":"addTypeCheckingInfoAnnotation(MethodNode)","path":"addTypeCheckingInfoAnnotation(org.codehaus.groovy.ast.MethodNode)","entryType":"Method"},{"name":"addUnsupportedPreOrPostfixExpressionError(Expression)","path":"addUnsupportedPreOrPostfixExpressionError(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"areCategoryMethodCalls(List, String, ClassNode[])","path":"areCategoryMethodCalls(java.util.List,%20java.lang.String,%20org.codehaus.groovy.ast.ClassNode%5B%5D)","entryType":"Method"},{"name":"checkCast(ClassNode, Expression)","path":"checkCast(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"checkClosureParameters(Expression, ClassNode)","path":"checkClosureParameters(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"checkForbiddenSpreadArgument(ArgumentListExpression)","path":"checkForbiddenSpreadArgument(org.codehaus.groovy.ast.expr.ArgumentListExpression)","entryType":"Method"},{"name":"checkGroovyConstructorMap(Expression, ClassNode, MapExpression)","path":"checkGroovyConstructorMap(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.expr.MapExpression)","entryType":"Method"},{"name":"checkGroovyStyleConstructor(ClassNode, ClassNode[])","path":"checkGroovyStyleConstructor(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.ClassNode%5B%5D)","entryType":"Method"},{"name":"checkGroovyStyleConstructor(ClassNode, ClassNode[], ASTNode)","path":"checkGroovyStyleConstructor(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.ClassNode%5B%5D,%20org.codehaus.groovy.ast.ASTNode)","entryType":"Method"},{"name":"checkReturnType(ReturnStatement)","path":"checkReturnType(org.codehaus.groovy.ast.stmt.ReturnStatement)","entryType":"Method"},{"name":"collectAllInterfaceMethodsByName(ClassNode, String, List)","path":"collectAllInterfaceMethodsByName(org.codehaus.groovy.ast.ClassNode,%20java.lang.String,%20java.util.List)","entryType":"Method"},{"name":"existsProperty(PropertyExpression, boolean)","path":"existsProperty(org.codehaus.groovy.ast.expr.PropertyExpression,%20boolean)","entryType":"Method"},{"name":"existsProperty(PropertyExpression, boolean, ClassCodeVisitorSupport)","path":"existsProperty(org.codehaus.groovy.ast.expr.PropertyExpression,%20boolean,%20org.codehaus.groovy.ast.ClassCodeVisitorSupport)","entryType":"Method"},{"name":"extractPropertyNameFromMethodName(String, String)","path":"extractPropertyNameFromMethodName(java.lang.String,%20java.lang.String)","entryType":"Method"},{"name":"extractTemporaryTypeInfoKey(Expression)","path":"extractTemporaryTypeInfoKey(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"extractTypesFromParameters(Parameter[])","path":"extractTypesFromParameters(org.codehaus.groovy.ast.Parameter%5B%5D)","entryType":"Method"},{"name":"findCurrentInstanceOfClass(Expression, ClassNode)","path":"findCurrentInstanceOfClass(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"findMethod(ClassNode, String, ClassNode...)","path":"findMethod(org.codehaus.groovy.ast.ClassNode,%20java.lang.String,%20org.codehaus.groovy.ast.ClassNode...)","entryType":"Method"},{"name":"findMethodOrFail(Expression, ClassNode, String, ClassNode...)","path":"findMethodOrFail(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.ClassNode,%20java.lang.String,%20org.codehaus.groovy.ast.ClassNode...)","entryType":"Method"},{"name":"findMethodsWithGenerated(ClassNode, String)","path":"findMethodsWithGenerated(org.codehaus.groovy.ast.ClassNode,%20java.lang.String)","entryType":"Method"},{"name":"formatArgumentList(ClassNode[])","path":"formatArgumentList(org.codehaus.groovy.ast.ClassNode%5B%5D)","entryType":"Method"},{"name":"getArgumentTypes(ArgumentListExpression)","path":"getArgumentTypes(org.codehaus.groovy.ast.expr.ArgumentListExpression)","entryType":"Method"},{"name":"getDelegationMetadata(ClosureExpression)","path":"getDelegationMetadata(org.codehaus.groovy.ast.expr.ClosureExpression)","entryType":"Method"},{"name":"getGroupOperationResultType(ClassNode, ClassNode)","path":"getGroupOperationResultType(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"getInferredReturnType(ASTNode)","path":"getInferredReturnType(org.codehaus.groovy.ast.ASTNode)","entryType":"Method"},{"name":"getInferredReturnTypeFromWithClosureArgument(Expression)","path":"getInferredReturnTypeFromWithClosureArgument(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"getOriginalDeclarationType(Expression)","path":"getOriginalDeclarationType(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"getResultType(ClassNode, int, ClassNode, BinaryExpression)","path":"getResultType(org.codehaus.groovy.ast.ClassNode,%20int,%20org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.expr.BinaryExpression)","entryType":"Method"},{"name":"getSourceUnit()","path":"getSourceUnit()","entryType":"Method"},{"name":"getTemporaryTypesForExpression(Expression)","path":"getTemporaryTypesForExpression(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"getType(ASTNode)","path":"getType(org.codehaus.groovy.ast.ASTNode)","entryType":"Method"},{"name":"getTypeCheckingAnnotations()","path":"getTypeCheckingAnnotations()","entryType":"Method"},{"name":"getTypeCheckingContext()","path":"getTypeCheckingContext()","entryType":"Method"},{"name":"hasRHSIncompleteGenericTypeInfo(ClassNode)","path":"hasRHSIncompleteGenericTypeInfo(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"hasSetter(PropertyExpression)","path":"hasSetter(org.codehaus.groovy.ast.expr.PropertyExpression)","entryType":"Method"},{"name":"inferClosureParameterTypes(ClassNode, Expression, ClosureExpression, Parameter, MethodNode)","path":"inferClosureParameterTypes(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.ClosureExpression,%20org.codehaus.groovy.ast.Parameter,%20org.codehaus.groovy.ast.MethodNode)","entryType":"Method"},{"name":"inferComponentType(ClassNode, ClassNode)","path":"inferComponentType(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"inferDiamondType(ConstructorCallExpression, ClassNode)","path":"inferDiamondType(org.codehaus.groovy.ast.expr.ConstructorCallExpression,%20org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"inferListExpressionType(ListExpression)","path":"inferListExpressionType(org.codehaus.groovy.ast.expr.ListExpression)","entryType":"Method"},{"name":"inferLoopElementType(ClassNode)","path":"inferLoopElementType(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"inferMapExpressionType(MapExpression)","path":"inferMapExpressionType(org.codehaus.groovy.ast.expr.MapExpression)","entryType":"Method"},{"name":"inferReturnTypeGenerics(ClassNode, MethodNode, Expression)","path":"inferReturnTypeGenerics(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.MethodNode,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"inferReturnTypeGenerics(ClassNode, MethodNode, Expression, GenericsType[])","path":"inferReturnTypeGenerics(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.MethodNode,%20org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.GenericsType%5B%5D)","entryType":"Method"},{"name":"initialize()","path":"initialize()","entryType":"Method"},{"name":"isClassInnerClassOrEqualTo(ClassNode, ClassNode)","path":"isClassInnerClassOrEqualTo(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"isClosureCall(String, Expression, Expression)","path":"isClosureCall(java.lang.String,%20org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"isNullConstant(Expression)","path":"isNullConstant(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"isSecondPassNeededForControlStructure(Map, Map)","path":"isSecondPassNeededForControlStructure(java.util.Map,%20java.util.Map)","entryType":"Method"},{"name":"isSkipMode(AnnotatedNode)","path":"isSkipMode(org.codehaus.groovy.ast.AnnotatedNode)","entryType":"Method"},{"name":"isSkippedInnerClass(AnnotatedNode)","path":"isSkippedInnerClass(org.codehaus.groovy.ast.AnnotatedNode)","entryType":"Method"},{"name":"makeOwnerList(Expression)","path":"makeOwnerList(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"performSecondPass()","path":"performSecondPass()","entryType":"Method"},{"name":"popAssignmentTracking(Map)","path":"popAssignmentTracking(java.util.Map)","entryType":"Method"},{"name":"prettyPrintMethodList(List)","path":"prettyPrintMethodList(java.util.List)","entryType":"Method"},{"name":"pushAssignmentTracking()","path":"pushAssignmentTracking()","entryType":"Method"},{"name":"pushInstanceOfTypeInfo(Expression, Expression)","path":"pushInstanceOfTypeInfo(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"restoreVariableExpressionMetadata(Map)","path":"restoreVariableExpressionMetadata(java.util.Map)","entryType":"Method"},{"name":"saveVariableExpressionMetadata(Set, Map)","path":"saveVariableExpressionMetadata(java.util.Set,%20java.util.Map)","entryType":"Method"},{"name":"setCompilationUnit(CompilationUnit)","path":"setCompilationUnit(org.codehaus.groovy.control.CompilationUnit)","entryType":"Method"},{"name":"setMethodsToBeVisited(Set)","path":"setMethodsToBeVisited(java.util.Set)","entryType":"Method"},{"name":"shouldSkipClassNode(ClassNode)","path":"shouldSkipClassNode(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"shouldSkipMethodNode(MethodNode)","path":"shouldSkipMethodNode(org.codehaus.groovy.ast.MethodNode)","entryType":"Method"},{"name":"silentlyVisitMethodNode(MethodNode)","path":"silentlyVisitMethodNode(org.codehaus.groovy.ast.MethodNode)","entryType":"Method"},{"name":"startMethodInference(MethodNode, ErrorCollector)","path":"startMethodInference(org.codehaus.groovy.ast.MethodNode,%20org.codehaus.groovy.control.ErrorCollector)","entryType":"Method"},{"name":"storeInferredReturnType(ASTNode, ClassNode)","path":"storeInferredReturnType(org.codehaus.groovy.ast.ASTNode,%20org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"storeInferredTypeForPropertyExpression(PropertyExpression, ClassNode)","path":"storeInferredTypeForPropertyExpression(org.codehaus.groovy.ast.expr.PropertyExpression,%20org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"storeTargetMethod(Expression, MethodNode)","path":"storeTargetMethod(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.MethodNode)","entryType":"Method"},{"name":"storeType(Expression, ClassNode)","path":"storeType(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"typeCheckAssignment(BinaryExpression, Expression, ClassNode, Expression, ClassNode)","path":"typeCheckAssignment(org.codehaus.groovy.ast.expr.BinaryExpression,%20org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"typeCheckClosureCall(Expression, ClassNode[], Parameter[])","path":"typeCheckClosureCall(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.ClassNode%5B%5D,%20org.codehaus.groovy.ast.Parameter%5B%5D)","entryType":"Method"},{"name":"typeCheckMapConstructor(ConstructorCallExpression, ClassNode, Expression)","path":"typeCheckMapConstructor(org.codehaus.groovy.ast.expr.ConstructorCallExpression,%20org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"typeCheckMethodsWithGenericsOrFail(ClassNode, ClassNode[], MethodNode, Expression)","path":"typeCheckMethodsWithGenericsOrFail(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.ClassNode%5B%5D,%20org.codehaus.groovy.ast.MethodNode,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"visitAttributeExpression(AttributeExpression)","path":"visitAttributeExpression(org.codehaus.groovy.ast.expr.AttributeExpression)","entryType":"Method"},{"name":"visitBinaryExpression(BinaryExpression)","path":"visitBinaryExpression(org.codehaus.groovy.ast.expr.BinaryExpression)","entryType":"Method"},{"name":"visitBitwiseNegationExpression(BitwiseNegationExpression)","path":"visitBitwiseNegationExpression(org.codehaus.groovy.ast.expr.BitwiseNegationExpression)","entryType":"Method"},{"name":"visitCaseStatement(CaseStatement)","path":"visitCaseStatement(org.codehaus.groovy.ast.stmt.CaseStatement)","entryType":"Method"},{"name":"visitCastExpression(CastExpression)","path":"visitCastExpression(org.codehaus.groovy.ast.expr.CastExpression)","entryType":"Method"},{"name":"visitClass(ClassNode)","path":"visitClass(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"visitClassExpression(ClassExpression)","path":"visitClassExpression(org.codehaus.groovy.ast.expr.ClassExpression)","entryType":"Method"},{"name":"visitClosureExpression(ClosureExpression)","path":"visitClosureExpression(org.codehaus.groovy.ast.expr.ClosureExpression)","entryType":"Method"},{"name":"visitConstructor(ConstructorNode)","path":"visitConstructor(org.codehaus.groovy.ast.ConstructorNode)","entryType":"Method"},{"name":"visitConstructorCallExpression(ConstructorCallExpression)","path":"visitConstructorCallExpression(org.codehaus.groovy.ast.expr.ConstructorCallExpression)","entryType":"Method"},{"name":"visitConstructorOrMethod(MethodNode, boolean)","path":"visitConstructorOrMethod(org.codehaus.groovy.ast.MethodNode,%20boolean)","entryType":"Method"},{"name":"visitField(FieldNode)","path":"visitField(org.codehaus.groovy.ast.FieldNode)","entryType":"Method"},{"name":"visitForLoop(ForStatement)","path":"visitForLoop(org.codehaus.groovy.ast.stmt.ForStatement)","entryType":"Method"},{"name":"visitIfElse(IfStatement)","path":"visitIfElse(org.codehaus.groovy.ast.stmt.IfStatement)","entryType":"Method"},{"name":"visitMethod(MethodNode)","path":"visitMethod(org.codehaus.groovy.ast.MethodNode)","entryType":"Method"},{"name":"visitMethodCallArguments(ClassNode, ArgumentListExpression, boolean, MethodNode)","path":"visitMethodCallArguments(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.expr.ArgumentListExpression,%20boolean,%20org.codehaus.groovy.ast.MethodNode)","entryType":"Method"},{"name":"visitMethodCallExpression(MethodCallExpression)","path":"visitMethodCallExpression(org.codehaus.groovy.ast.expr.MethodCallExpression)","entryType":"Method"},{"name":"visitPostfixExpression(PostfixExpression)","path":"visitPostfixExpression(org.codehaus.groovy.ast.expr.PostfixExpression)","entryType":"Method"},{"name":"visitPrefixExpression(PrefixExpression)","path":"visitPrefixExpression(org.codehaus.groovy.ast.expr.PrefixExpression)","entryType":"Method"},{"name":"visitProperty(PropertyNode)","path":"visitProperty(org.codehaus.groovy.ast.PropertyNode)","entryType":"Method"},{"name":"visitPropertyExpression(PropertyExpression)","path":"visitPropertyExpression(org.codehaus.groovy.ast.expr.PropertyExpression)","entryType":"Method"},{"name":"visitRangeExpression(RangeExpression)","path":"visitRangeExpression(org.codehaus.groovy.ast.expr.RangeExpression)","entryType":"Method"},{"name":"visitReturnStatement(ReturnStatement)","path":"visitReturnStatement(org.codehaus.groovy.ast.stmt.ReturnStatement)","entryType":"Method"},{"name":"visitStaticMethodCallExpression(StaticMethodCallExpression)","path":"visitStaticMethodCallExpression(org.codehaus.groovy.ast.expr.StaticMethodCallExpression)","entryType":"Method"},{"name":"visitSwitch(SwitchStatement)","path":"visitSwitch(org.codehaus.groovy.ast.stmt.SwitchStatement)","entryType":"Method"},{"name":"visitTernaryExpression(TernaryExpression)","path":"visitTernaryExpression(org.codehaus.groovy.ast.expr.TernaryExpression)","entryType":"Method"},{"name":"visitTryCatchFinally(TryCatchStatement)","path":"visitTryCatchFinally(org.codehaus.groovy.ast.stmt.TryCatchStatement)","entryType":"Method"},{"name":"visitUnaryMinusExpression(UnaryMinusExpression)","path":"visitUnaryMinusExpression(org.codehaus.groovy.ast.expr.UnaryMinusExpression)","entryType":"Method"},{"name":"visitUnaryPlusExpression(UnaryPlusExpression)","path":"visitUnaryPlusExpression(org.codehaus.groovy.ast.expr.UnaryPlusExpression)","entryType":"Method"},{"name":"visitVariableExpression(VariableExpression)","path":"visitVariableExpression(org.codehaus.groovy.ast.expr.VariableExpression)","entryType":"Method"},{"name":"visitWhileLoop(WhileStatement)","path":"visitWhileLoop(org.codehaus.groovy.ast.stmt.WhileStatement)","entryType":"Method"},{"name":"wrapTypeIfNecessary(ClassNode)","path":"wrapTypeIfNecessary(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"Fields","isHeader":true},{"name":"CLOSURE_CALL_NO_ARG","path":"CLOSURE_CALL_NO_ARG","entryType":"Field"},{"name":"CLOSURE_CALL_ONE_ARG","path":"CLOSURE_CALL_ONE_ARG","entryType":"Field"},{"name":"CLOSURE_CALL_VARGS","path":"CLOSURE_CALL_VARGS","entryType":"Field"},{"name":"CLOSUREPARAMS_CLASSNODE","path":"CLOSUREPARAMS_CLASSNODE","entryType":"Field"},{"name":"CURRENT_SIGNATURE_PROTOCOL","path":"CURRENT_SIGNATURE_PROTOCOL","entryType":"Field"},{"name":"CURRENT_SIGNATURE_PROTOCOL_VERSION","path":"CURRENT_SIGNATURE_PROTOCOL_VERSION","entryType":"Field"},{"name":"DELEGATES_TO","path":"DELEGATES_TO","entryType":"Field"},{"name":"DELEGATES_TO_TARGET","path":"DELEGATES_TO_TARGET","entryType":"Field"},{"name":"DGM_CLASSNODE","path":"DGM_CLASSNODE","entryType":"Field"},{"name":"EMPTY_METHODNODE_LIST","path":"EMPTY_METHODNODE_LIST","entryType":"Field"},{"name":"ENUMERATION_TYPE","path":"ENUMERATION_TYPE","entryType":"Field"},{"name":"ERROR_COLLECTOR","path":"ERROR_COLLECTOR","entryType":"Field"},{"name":"extension","path":"extension","entryType":"Field"},{"name":"GENERATED_EMPTY_STATEMENT","path":"GENERATED_EMPTY_STATEMENT","entryType":"Field"},{"name":"GET_DELEGATE","path":"GET_DELEGATE","entryType":"Field"},{"name":"GET_OWNER","path":"GET_OWNER","entryType":"Field"},{"name":"GET_THISOBJECT","path":"GET_THISOBJECT","entryType":"Field"},{"name":"ITERABLE_TYPE","path":"ITERABLE_TYPE","entryType":"Field"},{"name":"LINKEDHASHMAP_CLASSNODE","path":"LINKEDHASHMAP_CLASSNODE","entryType":"Field"},{"name":"MAP_ENTRY_TYPE","path":"MAP_ENTRY_TYPE","entryType":"Field"},{"name":"returnAdder","path":"returnAdder","entryType":"Field"},{"name":"returnListener","path":"returnListener","entryType":"Field"},{"name":"TYPECHECKED_CLASSNODE","path":"TYPECHECKED_CLASSNODE","entryType":"Field"},{"name":"TYPECHECKING_ANNOTATIONS","path":"TYPECHECKING_ANNOTATIONS","entryType":"Field"},{"name":"TYPECHECKING_INFO_NODE","path":"TYPECHECKING_INFO_NODE","entryType":"Field"},{"name":"typeCheckingContext","path":"typeCheckingContext","entryType":"Field"}]}