{"entries":[{"name":"Constructors","isHeader":true},{"name":"AbstractASTTransformUtil()","path":"AbstractASTTransformUtil()","entryType":"Constructor"},{"name":"Methods","isHeader":true},{"name":"assignStatement(Expression, Expression)","path":"assignStatement(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"createConstructorStatementDefault(FieldNode)","path":"createConstructorStatementDefault(org.codehaus.groovy.ast.FieldNode)","entryType":"Method"},{"name":"declStatement(Expression, Expression)","path":"declStatement(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"differentExpr(Expression, Expression)","path":"differentExpr(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"differentFieldExpr(FieldNode, Expression)","path":"differentFieldExpr(org.codehaus.groovy.ast.FieldNode,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"differentPropertyExpr(PropertyNode, Expression)","path":"differentPropertyExpr(org.codehaus.groovy.ast.PropertyNode,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"equalsNullExpr(Expression)","path":"equalsNullExpr(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"findArg(String)","path":"findArg(java.lang.String)","entryType":"Method"},{"name":"getInstanceNonPropertyFields(ClassNode)","path":"getInstanceNonPropertyFields(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"getInstanceProperties(ClassNode)","path":"getInstanceProperties(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"getInstancePropertyFields(ClassNode)","path":"getInstancePropertyFields(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"getSuperNonPropertyFields(ClassNode)","path":"getSuperNonPropertyFields(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"getSuperPropertyFields(ClassNode)","path":"getSuperPropertyFields(org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"hasDeclaredMethod(ClassNode, String, int)","path":"hasDeclaredMethod(org.codehaus.groovy.ast.ClassNode,%20java.lang.String,%20int)","entryType":"Method"},{"name":"identicalExpr(Expression, Expression)","path":"identicalExpr(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"isInstanceof(ClassNode, Expression)","path":"isInstanceof(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"isInstanceOf(Expression, ClassNode)","path":"isInstanceOf(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"isOneExpr(Expression)","path":"isOneExpr(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"isOrImplements(ClassNode, ClassNode)","path":"isOrImplements(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.ClassNode)","entryType":"Method"},{"name":"isTrueExpr(Expression)","path":"isTrueExpr(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"isZeroExpr(Expression)","path":"isZeroExpr(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"notNullExpr(Expression)","path":"notNullExpr(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"returnFalseIfFieldNotEqual(FieldNode, Expression)","path":"returnFalseIfFieldNotEqual(org.codehaus.groovy.ast.FieldNode,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"returnFalseIfNotInstanceof(ClassNode, Expression)","path":"returnFalseIfNotInstanceof(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"returnFalseIfNull(Expression)","path":"returnFalseIfNull(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"returnFalseIfPropertyNotEqual(PropertyNode, Expression)","path":"returnFalseIfPropertyNotEqual(org.codehaus.groovy.ast.PropertyNode,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"returnFalseIfWrongType(ClassNode, Expression)","path":"returnFalseIfWrongType(org.codehaus.groovy.ast.ClassNode,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"returnTrueIfIdentical(Expression, Expression)","path":"returnTrueIfIdentical(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"safeExpression(Expression, Expression)","path":"safeExpression(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"}]}