{"entries":[{"name":"Constructors","isHeader":true},{"name":"DeclarationExpression(Expression, Token, Expression)","path":"DeclarationExpression(org.codehaus.groovy.ast.expr.Expression,%20org.codehaus.groovy.syntax.Token,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Constructor"},{"name":"DeclarationExpression(VariableExpression, Token, Expression)","path":"DeclarationExpression(org.codehaus.groovy.ast.expr.VariableExpression,%20org.codehaus.groovy.syntax.Token,%20org.codehaus.groovy.ast.expr.Expression)","entryType":"Constructor"},{"name":"Methods","isHeader":true},{"name":"getTupleExpression()","path":"getTupleExpression()","entryType":"Method"},{"name":"getVariableExpression()","path":"getVariableExpression()","entryType":"Method"},{"name":"isMultipleAssignmentDeclaration()","path":"isMultipleAssignmentDeclaration()","entryType":"Method"},{"name":"setLeftExpression(Expression)","path":"setLeftExpression(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"setRightExpression(Expression)","path":"setRightExpression(org.codehaus.groovy.ast.expr.Expression)","entryType":"Method"},{"name":"transformExpression(ExpressionTransformer)","path":"transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)","entryType":"Method"},{"name":"visit(GroovyCodeVisitor)","path":"visit(org.codehaus.groovy.ast.GroovyCodeVisitor)","entryType":"Method"}]}